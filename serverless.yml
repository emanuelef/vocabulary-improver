service: vocabulary-improver

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 512
  timeout: 10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - s3:*
        - rekognition:*
      Resource:
        - { "Fn::GetAtt": ["VocabularyDynamoDBTable", "Arn" ] }
  environment:
    NAMES_TABLE: { "Ref": "VocabularyDynamoDBTable" }

functions:
  addWord:
    handler: handler.addWord
    events:
      - http:
          path: word
          method: post
          cors: true
  getWord:
    handler: handler.getWord
    events:
      - http:
          path: word
          method: get
          cors: true
  addedImage:
    handler: handler.addedImage
    events:
      - s3:
          bucket: vocabulary-images
          event: s3:ObjectCreated:*

resources:
  Resources:
    VocabularyDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: word
            AttributeType: S
        KeySchema:
          -
            AttributeName: word
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # S3BucketPhotos:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: 'vocabulary-images'
    #     AccessControl: Private
    #     CorsConfiguration:
    #       CorsRules:
    #       - AllowedMethods:
    #         - GET
    #         - PUT
    #         - POST
    #         - HEAD
    #         AllowedOrigins:
    #         - "*"
    #         AllowedHeaders:
    #         - "*"

    # ResizeLambdaPermissionPhotosS3:
    #   Type: "AWS::Lambda::Permission"
    #   Properties:
    #     FunctionName:
    #       "Fn::GetAtt":
    #         - ResizeLambdaFunction
    #         - Arn
    #     Principal: "s3.amazonaws.com"
    #     Action: "lambda:InvokeFunction"
    #     SourceAccount:
    #       Ref: AWS::AccountId
    #     SourceArn: "arn:aws:s3:::my-custom-bucket-name"
